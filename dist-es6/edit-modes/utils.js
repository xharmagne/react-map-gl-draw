"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumeric = isNumeric;
exports.parseEventElement = parseEventElement;
exports.getScreenCoords = getScreenCoords;
exports.findClosestPointOnLineSegment = findClosestPointOnLineSegment;
exports.getFeatureCoordinates = getFeatureCoordinates;
exports.updateRectanglePosition = updateRectanglePosition;

var _constants = require("../constants");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function isNumeric(val) {
  return !Array.isArray(val) && !isNaN(parseFloat(val)) && isFinite(val);
}

function parseEventElement(evt, features, guides) {
  var elem = evt.target;

  if (!elem || !elem.dataset || !elem.dataset.type) {
    return null;
  }

  var featureIndex = elem.dataset.featureIndex;
  featureIndex = isNumeric(featureIndex) ? Number(featureIndex) : -1;
  var index = elem.dataset.index;
  index = isNumeric(index) ? Number(index) : undefined;
  var type = elem.dataset.type;
  var tentativeFeature = guides && guides.find(function (g) {
    return g.properties.guideType === _constants.GUIDE_TYPE.TENTATIVE;
  });
  var object = null;
  var isGuide = false;

  switch (type) {
    case _constants.ELEMENT_TYPE.EDIT_HANDLE:
      object = guides.find(function (g) {
        var indexes = g.properties.positionIndexes;

        if (indexes) {
          return indexes[indexes.length - 1] === index;
        }

        return false;
      });
      isGuide = true;
      break;

    case _constants.ELEMENT_TYPE.SEGMENT:
    case _constants.ELEMENT_TYPE.FEATURE:
    case _constants.ELEMENT_TYPE.FILL:
      object = features[featureIndex] || tentativeFeature;
      break;

    default:
  }

  return {
    object: object,
    isGuide: isGuide,
    type: type,
    index: index,
    featureIndex: featureIndex
  };
}

function getScreenCoords(evt) {
  var _evt$offsetCenter = evt.offsetCenter,
      x = _evt$offsetCenter.x,
      y = _evt$offsetCenter.y;
  return [Number(x), Number(y)];
}

function findClosestPointOnLineSegment(p1, p2, p) {
  // line
  var k = (p2[1] - p1[1]) / (p2[0] - p1[0]);
  var b = p1[1] - k * p1[0]; // vertical line

  if (!isFinite(k)) {
    var q = [p1[0], p[1]];
    return inBounds(p1, p2, q) ? q : null;
  } // p is on line [p1, p2]


  if (p[0] * k + b - p[1] === 0) {
    return inBounds(p1, p2, p) ? p : null;
  }

  var qx = (k * p[1] + p[0] - k * b) / (k * k + 1);
  var qy = k * qx + b;
  return inBounds(p1, p2, [qx, qy]) ? [qx, qy] : null;
}

function getFeatureCoordinates(feature) {
  var coordinates = feature && feature.geometry && feature.geometry.coordinates;

  if (!coordinates) {
    return null;
  }

  var isPolygonal = feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON;
  var isSinglePoint = feature.geometry.type === _constants.GEOJSON_TYPE.POINT;
  return isPolygonal ? coordinates[0] : isSinglePoint ? [coordinates] : coordinates;
}

function updateRectanglePosition(feature, editHandleIndex, mapCoords) {
  var coordinates = getFeatureCoordinates(feature);

  if (!coordinates) {
    return null;
  } // @ts-ignore


  var points = coordinates.slice(0, 4);
  points[editHandleIndex % 4] = mapCoords;
  /*
   *   p0.x, p0.y (p0) ------ p2.x, p0.y (p1)
   *       |                      |
   *       |                      |
   *   p0.x, p2.y (p3) ----- p2.x, p2.y (p2)
   */

  var p0 = points[(editHandleIndex + 2) % 4];
  var p2 = points[editHandleIndex % 4];
  points[(editHandleIndex + 1) % 4] = [p2[0], p0[1]];
  points[(editHandleIndex + 3) % 4] = [p0[0], p2[1]];
  return feature.geometry.type === _constants.GEOJSON_TYPE.POLYGON ? [[].concat(_toConsumableArray(points), [points[0]])] : points;
}

function inBounds(p1, p2, p) {
  var bounds = [Math.min(p1[0], p2[0]), Math.max(p1[0], p2[0]), Math.min(p1[1], p2[1]), Math.max(p1[1], p2[1])];
  return p[0] >= bounds[0] && p[0] <= bounds[1] && p[1] >= bounds[2] && p[1] <= bounds[3];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,